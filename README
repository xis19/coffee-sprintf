 README
========

This is an implementation of sprintf in CoffeeScript.

 Usage
--------
Functon sprintf is implemented using CoffeeScript.

    sprintf(formatString, args...)

Arguments:

    formatString    string with conversion specifiers, simliar to C
    args            arguments

The format is

    %{flags}{width}(.{precision}){length}{conversion specifiers}

The supporting flags are:

    0               When right aligned, use '0' for padding, instead of ' '
    +               When the number is positive, explicitly include '+' sign
    (space)         When the number is positive, prefix a space for sign
    -               Left align the text instead of right aligning
    #               See C11 standard, 7.21.6.1 for details

If the converted value has fewer haracters than the width given, then padding
is introduced. By default the padding character is ' '.

precision gives the minimum number of digits to appear.

length is neglected, since JavaScript is weak/dynamic typed.

The currently supporting conversion specifiers are

    cdioxXfFeEs%

which

    c               single character, note the character is wide, different from C
    d               integer
    i               same to d
    o               unsigned integer, radix = 8
    x               unsigned integer, radix = 16, lower case
    X               unsigned integer, radix = 16, upper case
    f               float point number
    F               same to f
    e               float point number, in exponential form
    E               float point number, in exponential form
    s               string
    %               add a '%' character

For details, see C11 standard. The code is expected to follow the standard, with
a few exceptions.

Conversion specifiers not supported are:

    u               In JavaScript there is no unsigned numbers
    g, G            Plan to support in the future
    a, A            Plan to support in the future
    p               No pointer in JavaScript
    n               Plan to support in the future

The corresponding JavaScript code can be generated by

coffee -c sprintf.coffee


 Test
--------
QUnit is used for testing. To generate the test code, you must have a C
compiler and a Ruby interpreter.

In *nix environment, the test script can be generated by executing

cd test/generate_test; ruby generate_test.rb
